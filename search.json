[{"path":[]},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jelliama@student.ubc.ca. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to creditCardTool","title":"Contributing to creditCardTool","text":"outlines propose change creditCardTool. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to creditCardTool","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to creditCardTool","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to creditCardTool","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"DSCI-310-2025/creditCardTool\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to creditCardTool","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to creditCardTool","text":"Please note creditCardTool project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 dsci310_group12 Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/articles/getting-started.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"getting-started","text":"creditCardTool package includes useful helper functions working credit card default prediction data. vignette walks typical workflow.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/articles/getting-started.html","id":"simulate-a-small-example-dataset","dir":"Articles","previous_headings":"","what":"Simulate a Small Example Dataset","title":"getting-started","text":"","code":"df <- data.frame(   bill_amt1 = c(100, 200),   bill_amt2 = c(300, 400),   pay_amt1 = c(10, 20),   pay_amt2 = c(30, 40),   default_payment_next_month = c(0, 1) )  df <- clean_column_names(df)  df <- compute_avg_amounts(df)  split <- split_data(df, train_size = 0.8)  make_target_plot(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jellia Ma. Author, maintainer.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ma J (2025). creditCardTool: Helper Tools Credit Card Default Prediction. R package version 0.0.0.9000, https://dsci-310-2025.github.io/creditCardTool/.","code":"@Manual{,   title = {creditCardTool: Helper Tools for Credit Card Default Prediction},   author = {Jellia Ma},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dsci-310-2025.github.io/creditCardTool/}, }"},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"creditcardtool","dir":"","previous_headings":"","what":"Helper Tools for Credit Card Default Prediction","title":"Helper Tools for Credit Card Default Prediction","text":"creditCardTool package provides helper functions analyzing credit card default data, including data cleaning, splitting, visualization, summarization. designed support modular, reusable components typical data science pipeline.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Helper Tools for Credit Card Default Prediction","text":"package depends following R packages: ggplot2: visualizations dplyr: data manipulation tidyr: reshaping data tibble: modern data frames janitor: cleaning column names caret: confusion matrix metrics class: KNN model utils: writing files testthat: unit testing dependencies installed automatically installing package pak:","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Tools for Credit Card Default Prediction","text":"can install development version creditCardTool GitHub :","code":"# install.packages(\"pak\") pak::pak(\"DSCI-310-2025/creditCardTool\")"},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Helper Tools for Credit Card Default Prediction","text":"basic example shows solve common problem:","code":"library(creditCardTool)  # Basic example split <- split_data(data.frame(x = 1:100), train_size = 0.8) plot <- make_target_plot(data.frame(default_payment_next_month = c(0, 1, 0, 1)))"},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Helper Tools for Credit Card Default Prediction","text":"split_data() — Splits dataset training test sets make_target_plot() — Visualizes distribution default payments make_scatter_facet_plot() — Plots numeric features default status clean_column_names() — Standardizes column names snake_case compute_avg_amounts() — Computes average billing/payment values per row","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Helper Tools for Credit Card Default Prediction","text":"Please note creditCardTool project released Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/index.html","id":"licenses","dir":"","previous_headings":"","what":"Licenses","title":"Helper Tools for Credit Card Default Prediction","text":"project dual-licensed following: Creative Commons Attribution 4.0 International (CC 4.0): non-code assets (e.g., figures, documentation, text). may share adapt materials appropriate credit. MIT License: permissive software license code assets (e.g., scripts, functions, analysis files). can use, modify, distribute code attribution.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/clean_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean column names using janitor::clean_names — clean_column_names","title":"Clean column names using janitor::clean_names — clean_column_names","text":"Converts column names data frame consistent snake_case format.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/clean_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean column names using janitor::clean_names — clean_column_names","text":"","code":"clean_column_names(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/clean_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean column names using janitor::clean_names — clean_column_names","text":"df data frame column names clean.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/clean_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean column names using janitor::clean_names — clean_column_names","text":"data frame cleaned column names.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/clean_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean column names using janitor::clean_names — clean_column_names","text":"","code":"clean_column_names(data.frame(\"My Col\" = 1:3)) #>   my_col #> 1      1 #> 2      2 #> 3      3"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/compute_avg_amounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute row-wise averages for BILL_AMT and PAY_AMT columns — compute_avg_amounts","title":"Compute row-wise averages for BILL_AMT and PAY_AMT columns — compute_avg_amounts","text":"Adds two new columns: avg_bill_amt avg_pay_amt data frame, removes original billing payment columns.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/compute_avg_amounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute row-wise averages for BILL_AMT and PAY_AMT columns — compute_avg_amounts","text":"","code":"compute_avg_amounts(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/compute_avg_amounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute row-wise averages for BILL_AMT and PAY_AMT columns — compute_avg_amounts","text":"df data frame containing columns like bill_amt1 bill_amt6, pay_amt1 pay_amt6.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/compute_avg_amounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute row-wise averages for BILL_AMT and PAY_AMT columns — compute_avg_amounts","text":"modified data frame average columns without original billing/payment columns.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/evaluate_k_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate accuracy of KNN across multiple k values — evaluate_k_values","title":"Evaluate accuracy of KNN across multiple k values — evaluate_k_values","text":"Evaluate accuracy KNN across multiple k values","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/evaluate_k_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate accuracy of KNN across multiple k values — evaluate_k_values","text":"","code":"evaluate_k_values(train, test, train_labels, test_labels, k_values = 1:20)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/evaluate_k_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate accuracy of KNN across multiple k values — evaluate_k_values","text":"train Normalized training predictors test Normalized test predictors train_labels Training labels test_labels Test labels k_values Vector k values evaluate (default: 1 20)","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/evaluate_k_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate accuracy of KNN across multiple k values — evaluate_k_values","text":"data frame k corresponding accuracy","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/evaluate_k_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate accuracy of KNN across multiple k values — evaluate_k_values","text":"","code":"train <- data.frame(a = c(0, 1), b = c(1, 0)) test <- data.frame(a = c(0.2, 0.8), b = c(0.9, 0.1)) train_labels <- factor(c(0, 1)) test_labels <- factor(c(0, 1)) evaluate_k_values(train, test, train_labels, test_labels, k_values = 1:3) #> Warning: k = 3 exceeds number 2 of patterns #>   k accuracy #> 1 1      1.0 #> 2 2      0.5 #> 3 3      0.5"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_accuracy_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a KNN Accuracy Plot — make_accuracy_plot","title":"Create a KNN Accuracy Plot — make_accuracy_plot","text":"Create KNN Accuracy Plot","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_accuracy_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a KNN Accuracy Plot — make_accuracy_plot","text":"","code":"make_accuracy_plot(accuracy_df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_accuracy_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a KNN Accuracy Plot — make_accuracy_plot","text":"accuracy_df data frame k accuracy columns","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_accuracy_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a KNN Accuracy Plot — make_accuracy_plot","text":"ggplot object showing accuracy vs. k","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_accuracy_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a KNN Accuracy Plot — make_accuracy_plot","text":"","code":"df <- data.frame(k = 1:5, accuracy = c(0.6, 0.7, 0.75, 0.72, 0.8)) make_accuracy_plot(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_scatter_facet_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create scatter plots of features vs. default status with faceting — make_scatter_facet_plot","title":"Create scatter plots of features vs. default status with faceting — make_scatter_facet_plot","text":"function takes data frame character vector numeric feature column names, produces faceted scatter plot showing relationship feature binary default_payment_next_month status.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_scatter_facet_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create scatter plots of features vs. default status with faceting — make_scatter_facet_plot","text":"","code":"make_scatter_facet_plot(df, features)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_scatter_facet_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create scatter plots of features vs. default status with faceting — make_scatter_facet_plot","text":"df data frame containing features column named default_payment_next_month. features character vector column names (features) plot default status.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_scatter_facet_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create scatter plots of features vs. default status with faceting — make_scatter_facet_plot","text":"ggplot object faceted scatter plots.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_scatter_facet_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create scatter plots of features vs. default status with faceting — make_scatter_facet_plot","text":"","code":"df <- data.frame(   LIMIT_BAL = c(10000, 20000, 30000),   AGE = c(23, 45, 36),   default_payment_next_month = c(0, 1, 0) ) make_scatter_facet_plot(df, c(\"LIMIT_BAL\", \"AGE\")) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_target_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bar plot of the default payment distribution — make_target_plot","title":"Create a bar plot of the default payment distribution — make_target_plot","text":"function takes data frame contains column default_payment_next_month produces bar plot showing distribution default status.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_target_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar plot of the default payment distribution — make_target_plot","text":"","code":"make_target_plot(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_target_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar plot of the default payment distribution — make_target_plot","text":"df data frame containing column named default_payment_next_month.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_target_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bar plot of the default payment distribution — make_target_plot","text":"ggplot object showing bar plot default status.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/make_target_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar plot of the default payment distribution — make_target_plot","text":"","code":"df <- data.frame(default_payment_next_month = c(0, 1, 1, 0)) make_target_plot(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a numeric vector using Min-Max scaling — normalize","title":"Normalize a numeric vector using Min-Max scaling — normalize","text":"Scales numeric vector 0 1.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a numeric vector using Min-Max scaling — normalize","text":"","code":"normalize(x)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a numeric vector using Min-Max scaling — normalize","text":"x numeric vector","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a numeric vector using Min-Max scaling — normalize","text":"normalized vector 0 1","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize a numeric vector using Min-Max scaling — normalize","text":"","code":"normalize(c(1, 5, 10)) #> [1] 0.0000000 0.4444444 1.0000000"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/prepare_knn_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare normalized predictors and extract labels — prepare_knn_data","title":"Prepare normalized predictors and extract labels — prepare_knn_data","text":"Prepare normalized predictors extract labels","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/prepare_knn_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare normalized predictors and extract labels — prepare_knn_data","text":"","code":"prepare_knn_data(df_train, df_test, target = \"default_payment_next_month\")"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/prepare_knn_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare normalized predictors and extract labels — prepare_knn_data","text":"df_train Training data df_test Testing data target Column name target variable","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/prepare_knn_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare normalized predictors and extract labels — prepare_knn_data","text":"list normalized train/test data labels","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/prepare_knn_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare normalized predictors and extract labels — prepare_knn_data","text":"","code":"df <- data.frame(   feature1 = c(1, 2, 3, 4, 5),   feature2 = c(5, 4, 3, 2, 1),   default_payment_next_month = c(0, 1, 0, 1, 0) ) split <- split_dataset(df) prepare_knn_data(split$train, split$test, \"default_payment_next_month\") #> $train #>    feature1  feature2 #> 1 0.0000000 1.0000000 #> 2 0.3333333 0.6666667 #> 3 0.6666667 0.3333333 #> 4 1.0000000 0.0000000 #>  #> $test #>   feature1 feature2 #> 1      NaN      NaN #>  #> $train_labels #> [1] 0 1 0 1 #> Levels: 0 1 #>  #> $test_labels #> [1] 0 #> Levels: 0 #>"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_accuracy_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save accuracy vs. k plot to a file — save_accuracy_plot","title":"Save accuracy vs. k plot to a file — save_accuracy_plot","text":"Creates line plot KNN accuracy results saves PNG.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_accuracy_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save accuracy vs. k plot to a file — save_accuracy_plot","text":"","code":"save_accuracy_plot(accuracy_df, out_path)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_accuracy_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save accuracy vs. k plot to a file — save_accuracy_plot","text":"accuracy_df Data frame k accuracy out_path Output file path plot (PNG)","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_accuracy_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save accuracy vs. k plot to a file — save_accuracy_plot","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(k = 1:5, accuracy = c(0.6, 0.7, 0.75, 0.72, 0.8)) save_accuracy_plot(df, \"knn_accuracy.png\") } # }"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_model_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save confusion matrix and performance metrics to files — save_model_outputs","title":"Save confusion matrix and performance metrics to files — save_model_outputs","text":"Saves confusion matrix model performance CSV TXT files.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_model_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save confusion matrix and performance metrics to files — save_model_outputs","text":"","code":"save_model_outputs(predictions, actual, prefix)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_model_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save confusion matrix and performance metrics to files — save_model_outputs","text":"predictions Predicted labels actual Actual labels prefix Output file path prefix (extension)","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/save_model_outputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save confusion matrix and performance metrics to files — save_model_outputs","text":"","code":"if (FALSE) { # \\dontrun{ actual <- factor(c(0, 1, 0, 1)) pred <- factor(c(0, 1, 1, 1)) save_model_outputs(pred, actual, \"knn_results\") } # }"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a data frame into training and testing sets — split_data","title":"Split a data frame into training and testing sets — split_data","text":"Randomly splits data frame training set test set based given proportion.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a data frame into training and testing sets — split_data","text":"","code":"split_data(df, train_size = 0.8)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a data frame into training and testing sets — split_data","text":"df data frame split. train_size Proportion data use training (default 0.8).","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a data frame into training and testing sets — split_data","text":"list two data frames: train test.","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Split dataset into 80% training and 20% testing — split_dataset","title":"Split dataset into 80% training and 20% testing — split_dataset","text":"Split dataset 80% training 20% testing","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split dataset into 80% training and 20% testing — split_dataset","text":"","code":"split_dataset(df)"},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split dataset into 80% training and 20% testing — split_dataset","text":"df data frame","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split dataset into 80% training and 20% testing — split_dataset","text":"list 'train' 'test' data frames","code":""},{"path":"https://dsci-310-2025.github.io/creditCardTool/reference/split_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split dataset into 80% training and 20% testing — split_dataset","text":"","code":"split_dataset(data.frame(x = 1:10)) #> $train #>   x #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6 #> 7 7 #> 8 8 #>  #> $test #>     x #> 9   9 #> 10 10 #>"}]
